{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"prefixCls\", \"className\", \"style\", \"min\", \"max\", \"step\", \"defaultValue\", \"value\", \"disabled\", \"readOnly\", \"upHandler\", \"downHandler\", \"keyboard\", \"changeOnWheel\", \"controls\", \"classNames\", \"stringMode\", \"parser\", \"formatter\", \"precision\", \"decimalSeparator\", \"onChange\", \"onInput\", \"onPressEnter\", \"onStep\", \"changeOnBlur\"],\n  _excluded2 = [\"disabled\", \"style\", \"prefixCls\", \"value\", \"prefix\", \"suffix\", \"addonBefore\", \"addonAfter\", \"className\", \"classNames\"];\nimport getMiniDecimal, { getNumberPrecision, num2str, toFixed, validateNumber } from '@rc-component/mini-decimal';\nimport clsx from 'classnames';\nimport { BaseInput } from 'rc-input';\nimport { useLayoutUpdateEffect } from \"rc-util/es/hooks/useLayoutEffect\";\nimport { composeRef } from \"rc-util/es/ref\";\nimport * as React from 'react';\nimport useCursor from \"./hooks/useCursor\";\nimport StepHandler from \"./StepHandler\";\nimport { getDecupleSteps } from \"./utils/numberUtil\";\nimport { triggerFocus } from \"rc-input/es/utils/commonUtils\";\nimport useFrame from \"./hooks/useFrame\";\n/**\n * We support `stringMode` which need handle correct type when user call in onChange\n * format max or min value\n * 1. if isInvalid return null\n * 2. if precision is undefined, return decimal\n * 3. format with precision\n *    I. if max > 0, round down with precision. Example: max= 3.5, precision=0  afterFormat: 3\n *    II. if max < 0, round up with precision. Example: max= -3.5, precision=0  afterFormat: -4\n *    III. if min > 0, round up with precision. Example: min= 3.5, precision=0  afterFormat: 4\n *    IV. if min < 0, round down with precision. Example: max= -3.5, precision=0  afterFormat: -3\n */\nvar getDecimalValue = function getDecimalValue(stringMode, decimalValue) {\n  if (stringMode || decimalValue.isEmpty()) {\n    return decimalValue.toString();\n  }\n  return decimalValue.toNumber();\n};\nvar getDecimalIfValidate = function getDecimalIfValidate(value) {\n  var decimal = getMiniDecimal(value);\n  return decimal.isInvalidate() ? null : decimal;\n};\nvar InternalInputNumber = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _clsx;\n  var _props$prefixCls = props.prefixCls,\n    prefixCls = _props$prefixCls === void 0 ? 'rc-input-number' : _props$prefixCls,\n    className = props.className,\n    style = props.style,\n    min = props.min,\n    max = props.max,\n    _props$step = props.step,\n    step = _props$step === void 0 ? 1 : _props$step,\n    defaultValue = props.defaultValue,\n    value = props.value,\n    disabled = props.disabled,\n    readOnly = props.readOnly,\n    upHandler = props.upHandler,\n    downHandler = props.downHandler,\n    keyboard = props.keyboard,\n    _props$changeOnWheel = props.changeOnWheel,\n    changeOnWheel = _props$changeOnWheel === void 0 ? false : _props$changeOnWheel,\n    _props$controls = props.controls,\n    controls = _props$controls === void 0 ? true : _props$controls,\n    classNames = props.classNames,\n    stringMode = props.stringMode,\n    parser = props.parser,\n    formatter = props.formatter,\n    precision = props.precision,\n    decimalSeparator = props.decimalSeparator,\n    onChange = props.onChange,\n    onInput = props.onInput,\n    onPressEnter = props.onPressEnter,\n    onStep = props.onStep,\n    _props$changeOnBlur = props.changeOnBlur,\n    changeOnBlur = _props$changeOnBlur === void 0 ? true : _props$changeOnBlur,\n    inputProps = _objectWithoutProperties(props, _excluded);\n  var inputClassName = \"\".concat(prefixCls, \"-input\");\n  var inputRef = React.useRef(null);\n  var _React$useState = React.useState(false),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    focus = _React$useState2[0],\n    setFocus = _React$useState2[1];\n  var userTypingRef = React.useRef(false);\n  var compositionRef = React.useRef(false);\n  var shiftKeyRef = React.useRef(false);\n\n  // ============================ Value =============================\n  // Real value control\n  var _React$useState3 = React.useState(function () {\n      return getMiniDecimal(value !== null && value !== void 0 ? value : defaultValue);\n    }),\n    _React$useState4 = _slicedToArray(_React$useState3, 2),\n    decimalValue = _React$useState4[0],\n    setDecimalValue = _React$useState4[1];\n  function setUncontrolledDecimalValue(newDecimal) {\n    if (value === undefined) {\n      setDecimalValue(newDecimal);\n    }\n  }\n\n  // ====================== Parser & Formatter ======================\n  /**\n   * `precision` is used for formatter & onChange.\n   * It will auto generate by `value` & `step`.\n   * But it will not block user typing.\n   *\n   * Note: Auto generate `precision` is used for legacy logic.\n   * We should remove this since we already support high precision with BigInt.\n   *\n   * @param number  Provide which number should calculate precision\n   * @param userTyping  Change by user typing\n   */\n  var getPrecision = React.useCallback(function (numStr, userTyping) {\n    if (userTyping) {\n      return undefined;\n    }\n    if (precision >= 0) {\n      return precision;\n    }\n    return Math.max(getNumberPrecision(numStr), getNumberPrecision(step));\n  }, [precision, step]);\n\n  // >>> Parser\n  var mergedParser = React.useCallback(function (num) {\n    var numStr = String(num);\n    if (parser) {\n      return parser(numStr);\n    }\n    var parsedStr = numStr;\n    if (decimalSeparator) {\n      parsedStr = parsedStr.replace(decimalSeparator, '.');\n    }\n\n    // [Legacy] We still support auto convert `$ 123,456` to `123456`\n    return parsedStr.replace(/[^\\w.-]+/g, '');\n  }, [parser, decimalSeparator]);\n\n  // >>> Formatter\n  var inputValueRef = React.useRef('');\n  var mergedFormatter = React.useCallback(function (number, userTyping) {\n    if (formatter) {\n      return formatter(number, {\n        userTyping: userTyping,\n        input: String(inputValueRef.current)\n      });\n    }\n    var str = typeof number === 'number' ? num2str(number) : number;\n\n    // User typing will not auto format with precision directly\n    if (!userTyping) {\n      var mergedPrecision = getPrecision(str, userTyping);\n      if (validateNumber(str) && (decimalSeparator || mergedPrecision >= 0)) {\n        // Separator\n        var separatorStr = decimalSeparator || '.';\n        str = toFixed(str, separatorStr, mergedPrecision);\n      }\n    }\n    return str;\n  }, [formatter, getPrecision, decimalSeparator]);\n\n  // ========================== InputValue ==========================\n  /**\n   * Input text value control\n   *\n   * User can not update input content directly. It updates with follow rules by priority:\n   *  1. controlled `value` changed\n   *    * [SPECIAL] Typing like `1.` should not immediately convert to `1`\n   *  2. User typing with format (not precision)\n   *  3. Blur or Enter trigger revalidate\n   */\n  var _React$useState5 = React.useState(function () {\n      var initValue = defaultValue !== null && defaultValue !== void 0 ? defaultValue : value;\n      if (decimalValue.isInvalidate() && ['string', 'number'].includes(_typeof(initValue))) {\n        return Number.isNaN(initValue) ? '' : initValue;\n      }\n      return mergedFormatter(decimalValue.toString(), false);\n    }),\n    _React$useState6 = _slicedToArray(_React$useState5, 2),\n    inputValue = _React$useState6[0],\n    setInternalInputValue = _React$useState6[1];\n  inputValueRef.current = inputValue;\n\n  // Should always be string\n  function setInputValue(newValue, userTyping) {\n    setInternalInputValue(mergedFormatter(\n    // Invalidate number is sometime passed by external control, we should let it go\n    // Otherwise is controlled by internal interactive logic which check by userTyping\n    // You can ref 'show limited value when input is not focused' test for more info.\n    newValue.isInvalidate() ? newValue.toString(false) : newValue.toString(!userTyping), userTyping));\n  }\n\n  // >>> Max & Min limit\n  var maxDecimal = React.useMemo(function () {\n    return getDecimalIfValidate(max);\n  }, [max, precision]);\n  var minDecimal = React.useMemo(function () {\n    return getDecimalIfValidate(min);\n  }, [min, precision]);\n  var upDisabled = React.useMemo(function () {\n    if (!maxDecimal || !decimalValue || decimalValue.isInvalidate()) {\n      return false;\n    }\n    return maxDecimal.lessEquals(decimalValue);\n  }, [maxDecimal, decimalValue]);\n  var downDisabled = React.useMemo(function () {\n    if (!minDecimal || !decimalValue || decimalValue.isInvalidate()) {\n      return false;\n    }\n    return decimalValue.lessEquals(minDecimal);\n  }, [minDecimal, decimalValue]);\n\n  // Cursor controller\n  var _useCursor = useCursor(inputRef.current, focus),\n    _useCursor2 = _slicedToArray(_useCursor, 2),\n    recordCursor = _useCursor2[0],\n    restoreCursor = _useCursor2[1];\n\n  // ============================= Data =============================\n  /**\n   * Find target value closet within range.\n   * e.g. [11, 28]:\n   *    3  => 11\n   *    23 => 23\n   *    99 => 28\n   */\n  var getRangeValue = function getRangeValue(target) {\n    // target > max\n    if (maxDecimal && !target.lessEquals(maxDecimal)) {\n      return maxDecimal;\n    }\n\n    // target < min\n    if (minDecimal && !minDecimal.lessEquals(target)) {\n      return minDecimal;\n    }\n    return null;\n  };\n\n  /**\n   * Check value is in [min, max] range\n   */\n  var isInRange = function isInRange(target) {\n    return !getRangeValue(target);\n  };\n\n  /**\n   * Trigger `onChange` if value validated and not equals of origin.\n   * Return the value that re-align in range.\n   */\n  var triggerValueUpdate = function triggerValueUpdate(newValue, userTyping) {\n    var updateValue = newValue;\n    var isRangeValidate = isInRange(updateValue) || updateValue.isEmpty();\n\n    // Skip align value when trigger value is empty.\n    // We just trigger onChange(null)\n    // This should not block user typing\n    if (!updateValue.isEmpty() && !userTyping) {\n      // Revert value in range if needed\n      updateValue = getRangeValue(updateValue) || updateValue;\n      isRangeValidate = true;\n    }\n    if (!readOnly && !disabled && isRangeValidate) {\n      var numStr = updateValue.toString();\n      var mergedPrecision = getPrecision(numStr, userTyping);\n      if (mergedPrecision >= 0) {\n        updateValue = getMiniDecimal(toFixed(numStr, '.', mergedPrecision));\n\n        // When to fixed. The value may out of min & max range.\n        // 4 in [0, 3.8] => 3.8 => 4 (toFixed)\n        if (!isInRange(updateValue)) {\n          updateValue = getMiniDecimal(toFixed(numStr, '.', mergedPrecision, true));\n        }\n      }\n\n      // Trigger event\n      if (!updateValue.equals(decimalValue)) {\n        setUncontrolledDecimalValue(updateValue);\n        onChange === null || onChange === void 0 || onChange(updateValue.isEmpty() ? null : getDecimalValue(stringMode, updateValue));\n\n        // Reformat input if value is not controlled\n        if (value === undefined) {\n          setInputValue(updateValue, userTyping);\n        }\n      }\n      return updateValue;\n    }\n    return decimalValue;\n  };\n\n  // ========================== User Input ==========================\n  var onNextPromise = useFrame();\n\n  // >>> Collect input value\n  var collectInputValue = function collectInputValue(inputStr) {\n    recordCursor();\n\n    // Update inputValue in case input can not parse as number\n    // Refresh ref value immediately since it may used by formatter\n    inputValueRef.current = inputStr;\n    setInternalInputValue(inputStr);\n\n    // Parse number\n    if (!compositionRef.current) {\n      var finalValue = mergedParser(inputStr);\n      var finalDecimal = getMiniDecimal(finalValue);\n      if (!finalDecimal.isNaN()) {\n        triggerValueUpdate(finalDecimal, true);\n      }\n    }\n\n    // Trigger onInput later to let user customize value if they want to handle something after onChange\n    onInput === null || onInput === void 0 || onInput(inputStr);\n\n    // optimize for chinese input experience\n    // https://github.com/ant-design/ant-design/issues/8196\n    onNextPromise(function () {\n      var nextInputStr = inputStr;\n      if (!parser) {\n        nextInputStr = inputStr.replace(/。/g, '.');\n      }\n      if (nextInputStr !== inputStr) {\n        collectInputValue(nextInputStr);\n      }\n    });\n  };\n\n  // >>> Composition\n  var onCompositionStart = function onCompositionStart() {\n    compositionRef.current = true;\n  };\n  var onCompositionEnd = function onCompositionEnd() {\n    compositionRef.current = false;\n    collectInputValue(inputRef.current.value);\n  };\n\n  // >>> Input\n  var onInternalInput = function onInternalInput(e) {\n    collectInputValue(e.target.value);\n  };\n\n  // ============================= Step =============================\n  var onInternalStep = function onInternalStep(up) {\n    var _inputRef$current;\n    // Ignore step since out of range\n    if (up && upDisabled || !up && downDisabled) {\n      return;\n    }\n\n    // Clear typing status since it may be caused by up & down key.\n    // We should sync with input value.\n    userTypingRef.current = false;\n    var stepDecimal = getMiniDecimal(shiftKeyRef.current ? getDecupleSteps(step) : step);\n    if (!up) {\n      stepDecimal = stepDecimal.negate();\n    }\n    var target = (decimalValue || getMiniDecimal(0)).add(stepDecimal.toString());\n    var updatedValue = triggerValueUpdate(target, false);\n    onStep === null || onStep === void 0 || onStep(getDecimalValue(stringMode, updatedValue), {\n      offset: shiftKeyRef.current ? getDecupleSteps(step) : step,\n      type: up ? 'up' : 'down'\n    });\n    (_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 || _inputRef$current.focus();\n  };\n\n  // ============================ Flush =============================\n  /**\n   * Flush current input content to trigger value change & re-formatter input if needed.\n   * This will always flush input value for update.\n   * If it's invalidate, will fallback to last validate value.\n   */\n  var flushInputValue = function flushInputValue(userTyping) {\n    var parsedValue = getMiniDecimal(mergedParser(inputValue));\n    var formatValue = parsedValue;\n    if (!parsedValue.isNaN()) {\n      // Only validate value or empty value can be re-fill to inputValue\n      // Reassign the formatValue within ranged of trigger control\n      formatValue = triggerValueUpdate(parsedValue, userTyping);\n    } else {\n      formatValue = triggerValueUpdate(decimalValue, userTyping);\n    }\n    if (value !== undefined) {\n      // Reset back with controlled value first\n      setInputValue(decimalValue, false);\n    } else if (!formatValue.isNaN()) {\n      // Reset input back since no validate value\n      setInputValue(formatValue, false);\n    }\n  };\n\n  // Solve the issue of the event triggering sequence when entering numbers in chinese input (Safari)\n  var onBeforeInput = function onBeforeInput() {\n    userTypingRef.current = true;\n  };\n  var onKeyDown = function onKeyDown(event) {\n    var key = event.key,\n      shiftKey = event.shiftKey;\n    userTypingRef.current = true;\n    shiftKeyRef.current = shiftKey;\n    if (key === 'Enter') {\n      if (!compositionRef.current) {\n        userTypingRef.current = false;\n      }\n      flushInputValue(false);\n      onPressEnter === null || onPressEnter === void 0 || onPressEnter(event);\n    }\n    if (keyboard === false) {\n      return;\n    }\n\n    // Do step\n    if (!compositionRef.current && ['Up', 'ArrowUp', 'Down', 'ArrowDown'].includes(key)) {\n      onInternalStep(key === 'Up' || key === 'ArrowUp');\n      event.preventDefault();\n    }\n  };\n  var onKeyUp = function onKeyUp() {\n    userTypingRef.current = false;\n    shiftKeyRef.current = false;\n  };\n  React.useEffect(function () {\n    if (changeOnWheel && focus) {\n      var onWheel = function onWheel(event) {\n        // moving mouse wheel rises wheel event with deltaY < 0\n        // scroll value grows from top to bottom, as screen Y coordinate\n        onInternalStep(event.deltaY < 0);\n        event.preventDefault();\n      };\n      var input = inputRef.current;\n      if (input) {\n        // React onWheel is passive and we can't preventDefault() in it.\n        // That's why we should subscribe with DOM listener\n        // https://stackoverflow.com/questions/63663025/react-onwheel-handler-cant-preventdefault-because-its-a-passive-event-listenev\n        input.addEventListener('wheel', onWheel, {\n          passive: false\n        });\n        return function () {\n          return input.removeEventListener('wheel', onWheel);\n        };\n      }\n    }\n  });\n\n  // >>> Focus & Blur\n  var onBlur = function onBlur() {\n    if (changeOnBlur) {\n      flushInputValue(false);\n    }\n    setFocus(false);\n    userTypingRef.current = false;\n  };\n\n  // ========================== Controlled ==========================\n  // Input by precision & formatter\n  useLayoutUpdateEffect(function () {\n    if (!decimalValue.isInvalidate()) {\n      setInputValue(decimalValue, false);\n    }\n  }, [precision, formatter]);\n\n  // Input by value\n  useLayoutUpdateEffect(function () {\n    var newValue = getMiniDecimal(value);\n    setDecimalValue(newValue);\n    var currentParsedValue = getMiniDecimal(mergedParser(inputValue));\n\n    // When user typing from `1.2` to `1.`, we should not convert to `1` immediately.\n    // But let it go if user set `formatter`\n    if (!newValue.equals(currentParsedValue) || !userTypingRef.current || formatter) {\n      // Update value as effect\n      setInputValue(newValue, userTypingRef.current);\n    }\n  }, [value]);\n\n  // ============================ Cursor ============================\n  useLayoutUpdateEffect(function () {\n    if (formatter) {\n      restoreCursor();\n    }\n  }, [inputValue]);\n\n  // ============================ Render ============================\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: clsx(prefixCls, className, (_clsx = {}, _defineProperty(_clsx, \"\".concat(prefixCls, \"-focused\"), focus), _defineProperty(_clsx, \"\".concat(prefixCls, \"-disabled\"), disabled), _defineProperty(_clsx, \"\".concat(prefixCls, \"-readonly\"), readOnly), _defineProperty(_clsx, \"\".concat(prefixCls, \"-not-a-number\"), decimalValue.isNaN()), _defineProperty(_clsx, \"\".concat(prefixCls, \"-out-of-range\"), !decimalValue.isInvalidate() && !isInRange(decimalValue)), _clsx)),\n    style: style,\n    onFocus: function onFocus() {\n      setFocus(true);\n    },\n    onBlur: onBlur,\n    onKeyDown: onKeyDown,\n    onKeyUp: onKeyUp,\n    onCompositionStart: onCompositionStart,\n    onCompositionEnd: onCompositionEnd,\n    onBeforeInput: onBeforeInput\n  }, controls && /*#__PURE__*/React.createElement(StepHandler, {\n    prefixCls: prefixCls,\n    upNode: upHandler,\n    downNode: downHandler,\n    upDisabled: upDisabled,\n    downDisabled: downDisabled,\n    onStep: onInternalStep\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(inputClassName, \"-wrap\")\n  }, /*#__PURE__*/React.createElement(\"input\", _extends({\n    autoComplete: \"off\",\n    role: \"spinbutton\",\n    \"aria-valuemin\": min,\n    \"aria-valuemax\": max,\n    \"aria-valuenow\": decimalValue.isInvalidate() ? null : decimalValue.toString(),\n    step: step\n  }, inputProps, {\n    ref: composeRef(inputRef, ref),\n    className: inputClassName,\n    value: inputValue,\n    onChange: onInternalInput,\n    disabled: disabled,\n    readOnly: readOnly\n  }))));\n});\nvar InputNumber = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var disabled = props.disabled,\n    style = props.style,\n    prefixCls = props.prefixCls,\n    value = props.value,\n    prefix = props.prefix,\n    suffix = props.suffix,\n    addonBefore = props.addonBefore,\n    addonAfter = props.addonAfter,\n    className = props.className,\n    classNames = props.classNames,\n    rest = _objectWithoutProperties(props, _excluded2);\n  var inputFocusRef = React.useRef(null);\n  var focus = function focus(option) {\n    if (inputFocusRef.current) {\n      triggerFocus(inputFocusRef.current, option);\n    }\n  };\n  return /*#__PURE__*/React.createElement(BaseInput, {\n    className: className,\n    triggerFocus: focus,\n    prefixCls: prefixCls,\n    value: value,\n    disabled: disabled,\n    style: style,\n    prefix: prefix,\n    suffix: suffix,\n    addonAfter: addonAfter,\n    addonBefore: addonBefore,\n    classNames: classNames,\n    components: {\n      affixWrapper: 'div',\n      groupWrapper: 'div',\n      wrapper: 'div',\n      groupAddon: 'div'\n    }\n  }, /*#__PURE__*/React.createElement(InternalInputNumber, _extends({\n    prefixCls: prefixCls,\n    disabled: disabled,\n    ref: composeRef(inputFocusRef, ref),\n    className: classNames === null || classNames === void 0 ? void 0 : classNames.input\n  }, rest)));\n});\nInputNumber.displayName = 'InputNumber';\nexport default InputNumber;","map":{"version":3,"names":["_extends","_defineProperty","_typeof","_slicedToArray","_objectWithoutProperties","_excluded","_excluded2","getMiniDecimal","getNumberPrecision","num2str","toFixed","validateNumber","clsx","BaseInput","useLayoutUpdateEffect","composeRef","React","useCursor","StepHandler","getDecupleSteps","triggerFocus","useFrame","getDecimalValue","stringMode","decimalValue","isEmpty","toString","toNumber","getDecimalIfValidate","value","decimal","isInvalidate","InternalInputNumber","forwardRef","props","ref","_clsx","_props$prefixCls","prefixCls","className","style","min","max","_props$step","step","defaultValue","disabled","readOnly","upHandler","downHandler","keyboard","_props$changeOnWheel","changeOnWheel","_props$controls","controls","classNames","parser","formatter","precision","decimalSeparator","onChange","onInput","onPressEnter","onStep","_props$changeOnBlur","changeOnBlur","inputProps","inputClassName","concat","inputRef","useRef","_React$useState","useState","_React$useState2","focus","setFocus","userTypingRef","compositionRef","shiftKeyRef","_React$useState3","_React$useState4","setDecimalValue","setUncontrolledDecimalValue","newDecimal","undefined","getPrecision","useCallback","numStr","userTyping","Math","mergedParser","num","String","parsedStr","replace","inputValueRef","mergedFormatter","number","input","current","str","mergedPrecision","separatorStr","_React$useState5","initValue","includes","Number","isNaN","_React$useState6","inputValue","setInternalInputValue","setInputValue","newValue","maxDecimal","useMemo","minDecimal","upDisabled","lessEquals","downDisabled","_useCursor","_useCursor2","recordCursor","restoreCursor","getRangeValue","target","isInRange","triggerValueUpdate","updateValue","isRangeValidate","equals","onNextPromise","collectInputValue","inputStr","finalValue","finalDecimal","nextInputStr","onCompositionStart","onCompositionEnd","onInternalInput","e","onInternalStep","up","_inputRef$current","stepDecimal","negate","add","updatedValue","offset","type","flushInputValue","parsedValue","formatValue","onBeforeInput","onKeyDown","event","key","shiftKey","preventDefault","onKeyUp","useEffect","onWheel","deltaY","addEventListener","passive","removeEventListener","onBlur","currentParsedValue","createElement","onFocus","upNode","downNode","autoComplete","role","InputNumber","prefix","suffix","addonBefore","addonAfter","rest","inputFocusRef","option","components","affixWrapper","groupWrapper","wrapper","groupAddon","displayName"],"sources":["C:/Users/joaop/Goal-tracking/frontend/node_modules/rc-input-number/es/InputNumber.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"prefixCls\", \"className\", \"style\", \"min\", \"max\", \"step\", \"defaultValue\", \"value\", \"disabled\", \"readOnly\", \"upHandler\", \"downHandler\", \"keyboard\", \"changeOnWheel\", \"controls\", \"classNames\", \"stringMode\", \"parser\", \"formatter\", \"precision\", \"decimalSeparator\", \"onChange\", \"onInput\", \"onPressEnter\", \"onStep\", \"changeOnBlur\"],\n  _excluded2 = [\"disabled\", \"style\", \"prefixCls\", \"value\", \"prefix\", \"suffix\", \"addonBefore\", \"addonAfter\", \"className\", \"classNames\"];\nimport getMiniDecimal, { getNumberPrecision, num2str, toFixed, validateNumber } from '@rc-component/mini-decimal';\nimport clsx from 'classnames';\nimport { BaseInput } from 'rc-input';\nimport { useLayoutUpdateEffect } from \"rc-util/es/hooks/useLayoutEffect\";\nimport { composeRef } from \"rc-util/es/ref\";\nimport * as React from 'react';\nimport useCursor from \"./hooks/useCursor\";\nimport StepHandler from \"./StepHandler\";\nimport { getDecupleSteps } from \"./utils/numberUtil\";\nimport { triggerFocus } from \"rc-input/es/utils/commonUtils\";\nimport useFrame from \"./hooks/useFrame\";\n/**\n * We support `stringMode` which need handle correct type when user call in onChange\n * format max or min value\n * 1. if isInvalid return null\n * 2. if precision is undefined, return decimal\n * 3. format with precision\n *    I. if max > 0, round down with precision. Example: max= 3.5, precision=0  afterFormat: 3\n *    II. if max < 0, round up with precision. Example: max= -3.5, precision=0  afterFormat: -4\n *    III. if min > 0, round up with precision. Example: min= 3.5, precision=0  afterFormat: 4\n *    IV. if min < 0, round down with precision. Example: max= -3.5, precision=0  afterFormat: -3\n */\nvar getDecimalValue = function getDecimalValue(stringMode, decimalValue) {\n  if (stringMode || decimalValue.isEmpty()) {\n    return decimalValue.toString();\n  }\n  return decimalValue.toNumber();\n};\nvar getDecimalIfValidate = function getDecimalIfValidate(value) {\n  var decimal = getMiniDecimal(value);\n  return decimal.isInvalidate() ? null : decimal;\n};\nvar InternalInputNumber = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _clsx;\n  var _props$prefixCls = props.prefixCls,\n    prefixCls = _props$prefixCls === void 0 ? 'rc-input-number' : _props$prefixCls,\n    className = props.className,\n    style = props.style,\n    min = props.min,\n    max = props.max,\n    _props$step = props.step,\n    step = _props$step === void 0 ? 1 : _props$step,\n    defaultValue = props.defaultValue,\n    value = props.value,\n    disabled = props.disabled,\n    readOnly = props.readOnly,\n    upHandler = props.upHandler,\n    downHandler = props.downHandler,\n    keyboard = props.keyboard,\n    _props$changeOnWheel = props.changeOnWheel,\n    changeOnWheel = _props$changeOnWheel === void 0 ? false : _props$changeOnWheel,\n    _props$controls = props.controls,\n    controls = _props$controls === void 0 ? true : _props$controls,\n    classNames = props.classNames,\n    stringMode = props.stringMode,\n    parser = props.parser,\n    formatter = props.formatter,\n    precision = props.precision,\n    decimalSeparator = props.decimalSeparator,\n    onChange = props.onChange,\n    onInput = props.onInput,\n    onPressEnter = props.onPressEnter,\n    onStep = props.onStep,\n    _props$changeOnBlur = props.changeOnBlur,\n    changeOnBlur = _props$changeOnBlur === void 0 ? true : _props$changeOnBlur,\n    inputProps = _objectWithoutProperties(props, _excluded);\n  var inputClassName = \"\".concat(prefixCls, \"-input\");\n  var inputRef = React.useRef(null);\n  var _React$useState = React.useState(false),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    focus = _React$useState2[0],\n    setFocus = _React$useState2[1];\n  var userTypingRef = React.useRef(false);\n  var compositionRef = React.useRef(false);\n  var shiftKeyRef = React.useRef(false);\n\n  // ============================ Value =============================\n  // Real value control\n  var _React$useState3 = React.useState(function () {\n      return getMiniDecimal(value !== null && value !== void 0 ? value : defaultValue);\n    }),\n    _React$useState4 = _slicedToArray(_React$useState3, 2),\n    decimalValue = _React$useState4[0],\n    setDecimalValue = _React$useState4[1];\n  function setUncontrolledDecimalValue(newDecimal) {\n    if (value === undefined) {\n      setDecimalValue(newDecimal);\n    }\n  }\n\n  // ====================== Parser & Formatter ======================\n  /**\n   * `precision` is used for formatter & onChange.\n   * It will auto generate by `value` & `step`.\n   * But it will not block user typing.\n   *\n   * Note: Auto generate `precision` is used for legacy logic.\n   * We should remove this since we already support high precision with BigInt.\n   *\n   * @param number  Provide which number should calculate precision\n   * @param userTyping  Change by user typing\n   */\n  var getPrecision = React.useCallback(function (numStr, userTyping) {\n    if (userTyping) {\n      return undefined;\n    }\n    if (precision >= 0) {\n      return precision;\n    }\n    return Math.max(getNumberPrecision(numStr), getNumberPrecision(step));\n  }, [precision, step]);\n\n  // >>> Parser\n  var mergedParser = React.useCallback(function (num) {\n    var numStr = String(num);\n    if (parser) {\n      return parser(numStr);\n    }\n    var parsedStr = numStr;\n    if (decimalSeparator) {\n      parsedStr = parsedStr.replace(decimalSeparator, '.');\n    }\n\n    // [Legacy] We still support auto convert `$ 123,456` to `123456`\n    return parsedStr.replace(/[^\\w.-]+/g, '');\n  }, [parser, decimalSeparator]);\n\n  // >>> Formatter\n  var inputValueRef = React.useRef('');\n  var mergedFormatter = React.useCallback(function (number, userTyping) {\n    if (formatter) {\n      return formatter(number, {\n        userTyping: userTyping,\n        input: String(inputValueRef.current)\n      });\n    }\n    var str = typeof number === 'number' ? num2str(number) : number;\n\n    // User typing will not auto format with precision directly\n    if (!userTyping) {\n      var mergedPrecision = getPrecision(str, userTyping);\n      if (validateNumber(str) && (decimalSeparator || mergedPrecision >= 0)) {\n        // Separator\n        var separatorStr = decimalSeparator || '.';\n        str = toFixed(str, separatorStr, mergedPrecision);\n      }\n    }\n    return str;\n  }, [formatter, getPrecision, decimalSeparator]);\n\n  // ========================== InputValue ==========================\n  /**\n   * Input text value control\n   *\n   * User can not update input content directly. It updates with follow rules by priority:\n   *  1. controlled `value` changed\n   *    * [SPECIAL] Typing like `1.` should not immediately convert to `1`\n   *  2. User typing with format (not precision)\n   *  3. Blur or Enter trigger revalidate\n   */\n  var _React$useState5 = React.useState(function () {\n      var initValue = defaultValue !== null && defaultValue !== void 0 ? defaultValue : value;\n      if (decimalValue.isInvalidate() && ['string', 'number'].includes(_typeof(initValue))) {\n        return Number.isNaN(initValue) ? '' : initValue;\n      }\n      return mergedFormatter(decimalValue.toString(), false);\n    }),\n    _React$useState6 = _slicedToArray(_React$useState5, 2),\n    inputValue = _React$useState6[0],\n    setInternalInputValue = _React$useState6[1];\n  inputValueRef.current = inputValue;\n\n  // Should always be string\n  function setInputValue(newValue, userTyping) {\n    setInternalInputValue(mergedFormatter(\n    // Invalidate number is sometime passed by external control, we should let it go\n    // Otherwise is controlled by internal interactive logic which check by userTyping\n    // You can ref 'show limited value when input is not focused' test for more info.\n    newValue.isInvalidate() ? newValue.toString(false) : newValue.toString(!userTyping), userTyping));\n  }\n\n  // >>> Max & Min limit\n  var maxDecimal = React.useMemo(function () {\n    return getDecimalIfValidate(max);\n  }, [max, precision]);\n  var minDecimal = React.useMemo(function () {\n    return getDecimalIfValidate(min);\n  }, [min, precision]);\n  var upDisabled = React.useMemo(function () {\n    if (!maxDecimal || !decimalValue || decimalValue.isInvalidate()) {\n      return false;\n    }\n    return maxDecimal.lessEquals(decimalValue);\n  }, [maxDecimal, decimalValue]);\n  var downDisabled = React.useMemo(function () {\n    if (!minDecimal || !decimalValue || decimalValue.isInvalidate()) {\n      return false;\n    }\n    return decimalValue.lessEquals(minDecimal);\n  }, [minDecimal, decimalValue]);\n\n  // Cursor controller\n  var _useCursor = useCursor(inputRef.current, focus),\n    _useCursor2 = _slicedToArray(_useCursor, 2),\n    recordCursor = _useCursor2[0],\n    restoreCursor = _useCursor2[1];\n\n  // ============================= Data =============================\n  /**\n   * Find target value closet within range.\n   * e.g. [11, 28]:\n   *    3  => 11\n   *    23 => 23\n   *    99 => 28\n   */\n  var getRangeValue = function getRangeValue(target) {\n    // target > max\n    if (maxDecimal && !target.lessEquals(maxDecimal)) {\n      return maxDecimal;\n    }\n\n    // target < min\n    if (minDecimal && !minDecimal.lessEquals(target)) {\n      return minDecimal;\n    }\n    return null;\n  };\n\n  /**\n   * Check value is in [min, max] range\n   */\n  var isInRange = function isInRange(target) {\n    return !getRangeValue(target);\n  };\n\n  /**\n   * Trigger `onChange` if value validated and not equals of origin.\n   * Return the value that re-align in range.\n   */\n  var triggerValueUpdate = function triggerValueUpdate(newValue, userTyping) {\n    var updateValue = newValue;\n    var isRangeValidate = isInRange(updateValue) || updateValue.isEmpty();\n\n    // Skip align value when trigger value is empty.\n    // We just trigger onChange(null)\n    // This should not block user typing\n    if (!updateValue.isEmpty() && !userTyping) {\n      // Revert value in range if needed\n      updateValue = getRangeValue(updateValue) || updateValue;\n      isRangeValidate = true;\n    }\n    if (!readOnly && !disabled && isRangeValidate) {\n      var numStr = updateValue.toString();\n      var mergedPrecision = getPrecision(numStr, userTyping);\n      if (mergedPrecision >= 0) {\n        updateValue = getMiniDecimal(toFixed(numStr, '.', mergedPrecision));\n\n        // When to fixed. The value may out of min & max range.\n        // 4 in [0, 3.8] => 3.8 => 4 (toFixed)\n        if (!isInRange(updateValue)) {\n          updateValue = getMiniDecimal(toFixed(numStr, '.', mergedPrecision, true));\n        }\n      }\n\n      // Trigger event\n      if (!updateValue.equals(decimalValue)) {\n        setUncontrolledDecimalValue(updateValue);\n        onChange === null || onChange === void 0 || onChange(updateValue.isEmpty() ? null : getDecimalValue(stringMode, updateValue));\n\n        // Reformat input if value is not controlled\n        if (value === undefined) {\n          setInputValue(updateValue, userTyping);\n        }\n      }\n      return updateValue;\n    }\n    return decimalValue;\n  };\n\n  // ========================== User Input ==========================\n  var onNextPromise = useFrame();\n\n  // >>> Collect input value\n  var collectInputValue = function collectInputValue(inputStr) {\n    recordCursor();\n\n    // Update inputValue in case input can not parse as number\n    // Refresh ref value immediately since it may used by formatter\n    inputValueRef.current = inputStr;\n    setInternalInputValue(inputStr);\n\n    // Parse number\n    if (!compositionRef.current) {\n      var finalValue = mergedParser(inputStr);\n      var finalDecimal = getMiniDecimal(finalValue);\n      if (!finalDecimal.isNaN()) {\n        triggerValueUpdate(finalDecimal, true);\n      }\n    }\n\n    // Trigger onInput later to let user customize value if they want to handle something after onChange\n    onInput === null || onInput === void 0 || onInput(inputStr);\n\n    // optimize for chinese input experience\n    // https://github.com/ant-design/ant-design/issues/8196\n    onNextPromise(function () {\n      var nextInputStr = inputStr;\n      if (!parser) {\n        nextInputStr = inputStr.replace(/。/g, '.');\n      }\n      if (nextInputStr !== inputStr) {\n        collectInputValue(nextInputStr);\n      }\n    });\n  };\n\n  // >>> Composition\n  var onCompositionStart = function onCompositionStart() {\n    compositionRef.current = true;\n  };\n  var onCompositionEnd = function onCompositionEnd() {\n    compositionRef.current = false;\n    collectInputValue(inputRef.current.value);\n  };\n\n  // >>> Input\n  var onInternalInput = function onInternalInput(e) {\n    collectInputValue(e.target.value);\n  };\n\n  // ============================= Step =============================\n  var onInternalStep = function onInternalStep(up) {\n    var _inputRef$current;\n    // Ignore step since out of range\n    if (up && upDisabled || !up && downDisabled) {\n      return;\n    }\n\n    // Clear typing status since it may be caused by up & down key.\n    // We should sync with input value.\n    userTypingRef.current = false;\n    var stepDecimal = getMiniDecimal(shiftKeyRef.current ? getDecupleSteps(step) : step);\n    if (!up) {\n      stepDecimal = stepDecimal.negate();\n    }\n    var target = (decimalValue || getMiniDecimal(0)).add(stepDecimal.toString());\n    var updatedValue = triggerValueUpdate(target, false);\n    onStep === null || onStep === void 0 || onStep(getDecimalValue(stringMode, updatedValue), {\n      offset: shiftKeyRef.current ? getDecupleSteps(step) : step,\n      type: up ? 'up' : 'down'\n    });\n    (_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 || _inputRef$current.focus();\n  };\n\n  // ============================ Flush =============================\n  /**\n   * Flush current input content to trigger value change & re-formatter input if needed.\n   * This will always flush input value for update.\n   * If it's invalidate, will fallback to last validate value.\n   */\n  var flushInputValue = function flushInputValue(userTyping) {\n    var parsedValue = getMiniDecimal(mergedParser(inputValue));\n    var formatValue = parsedValue;\n    if (!parsedValue.isNaN()) {\n      // Only validate value or empty value can be re-fill to inputValue\n      // Reassign the formatValue within ranged of trigger control\n      formatValue = triggerValueUpdate(parsedValue, userTyping);\n    } else {\n      formatValue = triggerValueUpdate(decimalValue, userTyping);\n    }\n    if (value !== undefined) {\n      // Reset back with controlled value first\n      setInputValue(decimalValue, false);\n    } else if (!formatValue.isNaN()) {\n      // Reset input back since no validate value\n      setInputValue(formatValue, false);\n    }\n  };\n\n  // Solve the issue of the event triggering sequence when entering numbers in chinese input (Safari)\n  var onBeforeInput = function onBeforeInput() {\n    userTypingRef.current = true;\n  };\n  var onKeyDown = function onKeyDown(event) {\n    var key = event.key,\n      shiftKey = event.shiftKey;\n    userTypingRef.current = true;\n    shiftKeyRef.current = shiftKey;\n    if (key === 'Enter') {\n      if (!compositionRef.current) {\n        userTypingRef.current = false;\n      }\n      flushInputValue(false);\n      onPressEnter === null || onPressEnter === void 0 || onPressEnter(event);\n    }\n    if (keyboard === false) {\n      return;\n    }\n\n    // Do step\n    if (!compositionRef.current && ['Up', 'ArrowUp', 'Down', 'ArrowDown'].includes(key)) {\n      onInternalStep(key === 'Up' || key === 'ArrowUp');\n      event.preventDefault();\n    }\n  };\n  var onKeyUp = function onKeyUp() {\n    userTypingRef.current = false;\n    shiftKeyRef.current = false;\n  };\n  React.useEffect(function () {\n    if (changeOnWheel && focus) {\n      var onWheel = function onWheel(event) {\n        // moving mouse wheel rises wheel event with deltaY < 0\n        // scroll value grows from top to bottom, as screen Y coordinate\n        onInternalStep(event.deltaY < 0);\n        event.preventDefault();\n      };\n      var input = inputRef.current;\n      if (input) {\n        // React onWheel is passive and we can't preventDefault() in it.\n        // That's why we should subscribe with DOM listener\n        // https://stackoverflow.com/questions/63663025/react-onwheel-handler-cant-preventdefault-because-its-a-passive-event-listenev\n        input.addEventListener('wheel', onWheel, {\n          passive: false\n        });\n        return function () {\n          return input.removeEventListener('wheel', onWheel);\n        };\n      }\n    }\n  });\n\n  // >>> Focus & Blur\n  var onBlur = function onBlur() {\n    if (changeOnBlur) {\n      flushInputValue(false);\n    }\n    setFocus(false);\n    userTypingRef.current = false;\n  };\n\n  // ========================== Controlled ==========================\n  // Input by precision & formatter\n  useLayoutUpdateEffect(function () {\n    if (!decimalValue.isInvalidate()) {\n      setInputValue(decimalValue, false);\n    }\n  }, [precision, formatter]);\n\n  // Input by value\n  useLayoutUpdateEffect(function () {\n    var newValue = getMiniDecimal(value);\n    setDecimalValue(newValue);\n    var currentParsedValue = getMiniDecimal(mergedParser(inputValue));\n\n    // When user typing from `1.2` to `1.`, we should not convert to `1` immediately.\n    // But let it go if user set `formatter`\n    if (!newValue.equals(currentParsedValue) || !userTypingRef.current || formatter) {\n      // Update value as effect\n      setInputValue(newValue, userTypingRef.current);\n    }\n  }, [value]);\n\n  // ============================ Cursor ============================\n  useLayoutUpdateEffect(function () {\n    if (formatter) {\n      restoreCursor();\n    }\n  }, [inputValue]);\n\n  // ============================ Render ============================\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: clsx(prefixCls, className, (_clsx = {}, _defineProperty(_clsx, \"\".concat(prefixCls, \"-focused\"), focus), _defineProperty(_clsx, \"\".concat(prefixCls, \"-disabled\"), disabled), _defineProperty(_clsx, \"\".concat(prefixCls, \"-readonly\"), readOnly), _defineProperty(_clsx, \"\".concat(prefixCls, \"-not-a-number\"), decimalValue.isNaN()), _defineProperty(_clsx, \"\".concat(prefixCls, \"-out-of-range\"), !decimalValue.isInvalidate() && !isInRange(decimalValue)), _clsx)),\n    style: style,\n    onFocus: function onFocus() {\n      setFocus(true);\n    },\n    onBlur: onBlur,\n    onKeyDown: onKeyDown,\n    onKeyUp: onKeyUp,\n    onCompositionStart: onCompositionStart,\n    onCompositionEnd: onCompositionEnd,\n    onBeforeInput: onBeforeInput\n  }, controls && /*#__PURE__*/React.createElement(StepHandler, {\n    prefixCls: prefixCls,\n    upNode: upHandler,\n    downNode: downHandler,\n    upDisabled: upDisabled,\n    downDisabled: downDisabled,\n    onStep: onInternalStep\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(inputClassName, \"-wrap\")\n  }, /*#__PURE__*/React.createElement(\"input\", _extends({\n    autoComplete: \"off\",\n    role: \"spinbutton\",\n    \"aria-valuemin\": min,\n    \"aria-valuemax\": max,\n    \"aria-valuenow\": decimalValue.isInvalidate() ? null : decimalValue.toString(),\n    step: step\n  }, inputProps, {\n    ref: composeRef(inputRef, ref),\n    className: inputClassName,\n    value: inputValue,\n    onChange: onInternalInput,\n    disabled: disabled,\n    readOnly: readOnly\n  }))));\n});\nvar InputNumber = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var disabled = props.disabled,\n    style = props.style,\n    prefixCls = props.prefixCls,\n    value = props.value,\n    prefix = props.prefix,\n    suffix = props.suffix,\n    addonBefore = props.addonBefore,\n    addonAfter = props.addonAfter,\n    className = props.className,\n    classNames = props.classNames,\n    rest = _objectWithoutProperties(props, _excluded2);\n  var inputFocusRef = React.useRef(null);\n  var focus = function focus(option) {\n    if (inputFocusRef.current) {\n      triggerFocus(inputFocusRef.current, option);\n    }\n  };\n  return /*#__PURE__*/React.createElement(BaseInput, {\n    className: className,\n    triggerFocus: focus,\n    prefixCls: prefixCls,\n    value: value,\n    disabled: disabled,\n    style: style,\n    prefix: prefix,\n    suffix: suffix,\n    addonAfter: addonAfter,\n    addonBefore: addonBefore,\n    classNames: classNames,\n    components: {\n      affixWrapper: 'div',\n      groupWrapper: 'div',\n      wrapper: 'div',\n      groupAddon: 'div'\n    }\n  }, /*#__PURE__*/React.createElement(InternalInputNumber, _extends({\n    prefixCls: prefixCls,\n    disabled: disabled,\n    ref: composeRef(inputFocusRef, ref),\n    className: classNames === null || classNames === void 0 ? void 0 : classNames.input\n  }, rest)));\n});\nInputNumber.displayName = 'InputNumber';\nexport default InputNumber;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}