{"ast":null,"code":"import { useMemo } from 'react';\nimport { devUseWarning } from '../../_util/warning';\nfunction getFilledItem(rowItem, rowRestCol, span) {\n  let clone = rowItem;\n  let exceed = false;\n  if (span === undefined || span > rowRestCol) {\n    clone = Object.assign(Object.assign({}, rowItem), {\n      span: rowRestCol\n    });\n    exceed = span !== undefined;\n  }\n  return [clone, exceed];\n}\n// Calculate the sum of span in a row\nfunction getCalcRows(rowItems, mergedColumn) {\n  const rows = [];\n  let tmpRow = [];\n  let rowRestCol = mergedColumn;\n  let exceed = false;\n  rowItems.filter(n => n).forEach((rowItem, index) => {\n    const span = rowItem === null || rowItem === void 0 ? void 0 : rowItem.span;\n    const mergedSpan = span || 1;\n    // Additional handle last one\n    if (index === rowItems.length - 1) {\n      const [item, itemExceed] = getFilledItem(rowItem, rowRestCol, span);\n      exceed = exceed || itemExceed;\n      tmpRow.push(item);\n      rows.push(tmpRow);\n      return;\n    }\n    if (mergedSpan < rowRestCol) {\n      rowRestCol -= mergedSpan;\n      tmpRow.push(rowItem);\n    } else {\n      const [item, itemExceed] = getFilledItem(rowItem, rowRestCol, mergedSpan);\n      exceed = exceed || itemExceed;\n      tmpRow.push(item);\n      rows.push(tmpRow);\n      rowRestCol = mergedColumn;\n      tmpRow = [];\n    }\n  });\n  return [rows, exceed];\n}\nconst useRow = (mergedColumn, items) => {\n  const [rows, exceed] = useMemo(() => getCalcRows(items, mergedColumn), [items, mergedColumn]);\n  if (process.env.NODE_ENV !== 'production') {\n    const warning = devUseWarning('Descriptions');\n    process.env.NODE_ENV !== \"production\" ? warning(!exceed, 'usage', 'Sum of column `span` in a line not match `column` of Descriptions.') : void 0;\n  }\n  return rows;\n};\nexport default useRow;","map":{"version":3,"names":["useMemo","devUseWarning","getFilledItem","rowItem","rowRestCol","span","clone","exceed","undefined","Object","assign","getCalcRows","rowItems","mergedColumn","rows","tmpRow","filter","n","forEach","index","mergedSpan","length","item","itemExceed","push","useRow","items","process","env","NODE_ENV","warning"],"sources":["C:/Users/joaop/Goal-tracking/frontend/node_modules/antd/es/descriptions/hooks/useRow.js"],"sourcesContent":["import { useMemo } from 'react';\nimport { devUseWarning } from '../../_util/warning';\nfunction getFilledItem(rowItem, rowRestCol, span) {\n  let clone = rowItem;\n  let exceed = false;\n  if (span === undefined || span > rowRestCol) {\n    clone = Object.assign(Object.assign({}, rowItem), {\n      span: rowRestCol\n    });\n    exceed = span !== undefined;\n  }\n  return [clone, exceed];\n}\n// Calculate the sum of span in a row\nfunction getCalcRows(rowItems, mergedColumn) {\n  const rows = [];\n  let tmpRow = [];\n  let rowRestCol = mergedColumn;\n  let exceed = false;\n  rowItems.filter(n => n).forEach((rowItem, index) => {\n    const span = rowItem === null || rowItem === void 0 ? void 0 : rowItem.span;\n    const mergedSpan = span || 1;\n    // Additional handle last one\n    if (index === rowItems.length - 1) {\n      const [item, itemExceed] = getFilledItem(rowItem, rowRestCol, span);\n      exceed = exceed || itemExceed;\n      tmpRow.push(item);\n      rows.push(tmpRow);\n      return;\n    }\n    if (mergedSpan < rowRestCol) {\n      rowRestCol -= mergedSpan;\n      tmpRow.push(rowItem);\n    } else {\n      const [item, itemExceed] = getFilledItem(rowItem, rowRestCol, mergedSpan);\n      exceed = exceed || itemExceed;\n      tmpRow.push(item);\n      rows.push(tmpRow);\n      rowRestCol = mergedColumn;\n      tmpRow = [];\n    }\n  });\n  return [rows, exceed];\n}\nconst useRow = (mergedColumn, items) => {\n  const [rows, exceed] = useMemo(() => getCalcRows(items, mergedColumn), [items, mergedColumn]);\n  if (process.env.NODE_ENV !== 'production') {\n    const warning = devUseWarning('Descriptions');\n    process.env.NODE_ENV !== \"production\" ? warning(!exceed, 'usage', 'Sum of column `span` in a line not match `column` of Descriptions.') : void 0;\n  }\n  return rows;\n};\nexport default useRow;"],"mappings":"AAAA,SAASA,OAAO,QAAQ,OAAO;AAC/B,SAASC,aAAa,QAAQ,qBAAqB;AACnD,SAASC,aAAaA,CAACC,OAAO,EAAEC,UAAU,EAAEC,IAAI,EAAE;EAChD,IAAIC,KAAK,GAAGH,OAAO;EACnB,IAAII,MAAM,GAAG,KAAK;EAClB,IAAIF,IAAI,KAAKG,SAAS,IAAIH,IAAI,GAAGD,UAAU,EAAE;IAC3CE,KAAK,GAAGG,MAAM,CAACC,MAAM,CAACD,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEP,OAAO,CAAC,EAAE;MAChDE,IAAI,EAAED;IACR,CAAC,CAAC;IACFG,MAAM,GAAGF,IAAI,KAAKG,SAAS;EAC7B;EACA,OAAO,CAACF,KAAK,EAAEC,MAAM,CAAC;AACxB;AACA;AACA,SAASI,WAAWA,CAACC,QAAQ,EAAEC,YAAY,EAAE;EAC3C,MAAMC,IAAI,GAAG,EAAE;EACf,IAAIC,MAAM,GAAG,EAAE;EACf,IAAIX,UAAU,GAAGS,YAAY;EAC7B,IAAIN,MAAM,GAAG,KAAK;EAClBK,QAAQ,CAACI,MAAM,CAACC,CAAC,IAAIA,CAAC,CAAC,CAACC,OAAO,CAAC,CAACf,OAAO,EAAEgB,KAAK,KAAK;IAClD,MAAMd,IAAI,GAAGF,OAAO,KAAK,IAAI,IAAIA,OAAO,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,OAAO,CAACE,IAAI;IAC3E,MAAMe,UAAU,GAAGf,IAAI,IAAI,CAAC;IAC5B;IACA,IAAIc,KAAK,KAAKP,QAAQ,CAACS,MAAM,GAAG,CAAC,EAAE;MACjC,MAAM,CAACC,IAAI,EAAEC,UAAU,CAAC,GAAGrB,aAAa,CAACC,OAAO,EAAEC,UAAU,EAAEC,IAAI,CAAC;MACnEE,MAAM,GAAGA,MAAM,IAAIgB,UAAU;MAC7BR,MAAM,CAACS,IAAI,CAACF,IAAI,CAAC;MACjBR,IAAI,CAACU,IAAI,CAACT,MAAM,CAAC;MACjB;IACF;IACA,IAAIK,UAAU,GAAGhB,UAAU,EAAE;MAC3BA,UAAU,IAAIgB,UAAU;MACxBL,MAAM,CAACS,IAAI,CAACrB,OAAO,CAAC;IACtB,CAAC,MAAM;MACL,MAAM,CAACmB,IAAI,EAAEC,UAAU,CAAC,GAAGrB,aAAa,CAACC,OAAO,EAAEC,UAAU,EAAEgB,UAAU,CAAC;MACzEb,MAAM,GAAGA,MAAM,IAAIgB,UAAU;MAC7BR,MAAM,CAACS,IAAI,CAACF,IAAI,CAAC;MACjBR,IAAI,CAACU,IAAI,CAACT,MAAM,CAAC;MACjBX,UAAU,GAAGS,YAAY;MACzBE,MAAM,GAAG,EAAE;IACb;EACF,CAAC,CAAC;EACF,OAAO,CAACD,IAAI,EAAEP,MAAM,CAAC;AACvB;AACA,MAAMkB,MAAM,GAAGA,CAACZ,YAAY,EAAEa,KAAK,KAAK;EACtC,MAAM,CAACZ,IAAI,EAAEP,MAAM,CAAC,GAAGP,OAAO,CAAC,MAAMW,WAAW,CAACe,KAAK,EAAEb,YAAY,CAAC,EAAE,CAACa,KAAK,EAAEb,YAAY,CAAC,CAAC;EAC7F,IAAIc,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;IACzC,MAAMC,OAAO,GAAG7B,aAAa,CAAC,cAAc,CAAC;IAC7C0B,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,GAAGC,OAAO,CAAC,CAACvB,MAAM,EAAE,OAAO,EAAE,oEAAoE,CAAC,GAAG,KAAK,CAAC;EAClJ;EACA,OAAOO,IAAI;AACb,CAAC;AACD,eAAeW,MAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}