{"ast":null,"code":"export const FontGap = 3;\nfunction prepareCanvas(width, height) {\n  let ratio = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d');\n  const realWidth = width * ratio;\n  const realHeight = height * ratio;\n  canvas.setAttribute('width', `${realWidth}px`);\n  canvas.setAttribute('height', `${realHeight}px`);\n  ctx.save();\n  return [ctx, canvas, realWidth, realHeight];\n}\n/**\n * Get the clips of text content.\n * This is a lazy hook function since SSR no need this\n */\nexport default function useClips() {\n  // Get single clips\n  function getClips(content, rotate, ratio, width, height, font, gapX, gapY) {\n    // ================= Text / Image =================\n    const [ctx, canvas, contentWidth, contentHeight] = prepareCanvas(width, height, ratio);\n    if (content instanceof HTMLImageElement) {\n      // Image\n      ctx.drawImage(content, 0, 0, contentWidth, contentHeight);\n    } else {\n      // Text\n      const {\n        color,\n        fontSize,\n        fontStyle,\n        fontWeight,\n        fontFamily,\n        textAlign\n      } = font;\n      const mergedFontSize = Number(fontSize) * ratio;\n      ctx.font = `${fontStyle} normal ${fontWeight} ${mergedFontSize}px/${height}px ${fontFamily}`;\n      ctx.fillStyle = color;\n      ctx.textAlign = textAlign;\n      ctx.textBaseline = 'top';\n      const contents = Array.isArray(content) ? content : [content];\n      contents === null || contents === void 0 ? void 0 : contents.forEach((item, index) => {\n        ctx.fillText(item !== null && item !== void 0 ? item : '', contentWidth / 2, index * (mergedFontSize + FontGap * ratio));\n      });\n    }\n    // ==================== Rotate ====================\n    const angle = Math.PI / 180 * Number(rotate);\n    const maxSize = Math.max(width, height);\n    const [rCtx, rCanvas, realMaxSize] = prepareCanvas(maxSize, maxSize, ratio);\n    // Copy from `ctx` and rotate\n    rCtx.translate(realMaxSize / 2, realMaxSize / 2);\n    rCtx.rotate(angle);\n    if (contentWidth > 0 && contentHeight > 0) {\n      rCtx.drawImage(canvas, -contentWidth / 2, -contentHeight / 2);\n    }\n    // Get boundary of rotated text\n    function getRotatePos(x, y) {\n      const targetX = x * Math.cos(angle) - y * Math.sin(angle);\n      const targetY = x * Math.sin(angle) + y * Math.cos(angle);\n      return [targetX, targetY];\n    }\n    let left = 0;\n    let right = 0;\n    let top = 0;\n    let bottom = 0;\n    const halfWidth = contentWidth / 2;\n    const halfHeight = contentHeight / 2;\n    const points = [[0 - halfWidth, 0 - halfHeight], [0 + halfWidth, 0 - halfHeight], [0 + halfWidth, 0 + halfHeight], [0 - halfWidth, 0 + halfHeight]];\n    points.forEach(_ref => {\n      let [x, y] = _ref;\n      const [targetX, targetY] = getRotatePos(x, y);\n      left = Math.min(left, targetX);\n      right = Math.max(right, targetX);\n      top = Math.min(top, targetY);\n      bottom = Math.max(bottom, targetY);\n    });\n    const cutLeft = left + realMaxSize / 2;\n    const cutTop = top + realMaxSize / 2;\n    const cutWidth = right - left;\n    const cutHeight = bottom - top;\n    // ================ Fill Alternate ================\n    const realGapX = gapX * ratio;\n    const realGapY = gapY * ratio;\n    const filledWidth = (cutWidth + realGapX) * 2;\n    const filledHeight = cutHeight + realGapY;\n    const [fCtx, fCanvas] = prepareCanvas(filledWidth, filledHeight);\n    function drawImg() {\n      let targetX = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      let targetY = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      fCtx.drawImage(rCanvas, cutLeft, cutTop, cutWidth, cutHeight, targetX, targetY, cutWidth, cutHeight);\n    }\n    drawImg();\n    drawImg(cutWidth + realGapX, -cutHeight / 2 - realGapY / 2);\n    drawImg(cutWidth + realGapX, +cutHeight / 2 + realGapY / 2);\n    return [fCanvas.toDataURL(), filledWidth / ratio, filledHeight / ratio];\n  }\n  return getClips;\n}","map":{"version":3,"names":["FontGap","prepareCanvas","width","height","ratio","arguments","length","undefined","canvas","document","createElement","ctx","getContext","realWidth","realHeight","setAttribute","save","useClips","getClips","content","rotate","font","gapX","gapY","contentWidth","contentHeight","HTMLImageElement","drawImage","color","fontSize","fontStyle","fontWeight","fontFamily","textAlign","mergedFontSize","Number","fillStyle","textBaseline","contents","Array","isArray","forEach","item","index","fillText","angle","Math","PI","maxSize","max","rCtx","rCanvas","realMaxSize","translate","getRotatePos","x","y","targetX","cos","sin","targetY","left","right","top","bottom","halfWidth","halfHeight","points","_ref","min","cutLeft","cutTop","cutWidth","cutHeight","realGapX","realGapY","filledWidth","filledHeight","fCtx","fCanvas","drawImg","toDataURL"],"sources":["C:/Users/joaop/Goal-tracking/frontend/node_modules/antd/es/watermark/useClips.js"],"sourcesContent":["export const FontGap = 3;\nfunction prepareCanvas(width, height) {\n  let ratio = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d');\n  const realWidth = width * ratio;\n  const realHeight = height * ratio;\n  canvas.setAttribute('width', `${realWidth}px`);\n  canvas.setAttribute('height', `${realHeight}px`);\n  ctx.save();\n  return [ctx, canvas, realWidth, realHeight];\n}\n/**\n * Get the clips of text content.\n * This is a lazy hook function since SSR no need this\n */\nexport default function useClips() {\n  // Get single clips\n  function getClips(content, rotate, ratio, width, height, font, gapX, gapY) {\n    // ================= Text / Image =================\n    const [ctx, canvas, contentWidth, contentHeight] = prepareCanvas(width, height, ratio);\n    if (content instanceof HTMLImageElement) {\n      // Image\n      ctx.drawImage(content, 0, 0, contentWidth, contentHeight);\n    } else {\n      // Text\n      const {\n        color,\n        fontSize,\n        fontStyle,\n        fontWeight,\n        fontFamily,\n        textAlign\n      } = font;\n      const mergedFontSize = Number(fontSize) * ratio;\n      ctx.font = `${fontStyle} normal ${fontWeight} ${mergedFontSize}px/${height}px ${fontFamily}`;\n      ctx.fillStyle = color;\n      ctx.textAlign = textAlign;\n      ctx.textBaseline = 'top';\n      const contents = Array.isArray(content) ? content : [content];\n      contents === null || contents === void 0 ? void 0 : contents.forEach((item, index) => {\n        ctx.fillText(item !== null && item !== void 0 ? item : '', contentWidth / 2, index * (mergedFontSize + FontGap * ratio));\n      });\n    }\n    // ==================== Rotate ====================\n    const angle = Math.PI / 180 * Number(rotate);\n    const maxSize = Math.max(width, height);\n    const [rCtx, rCanvas, realMaxSize] = prepareCanvas(maxSize, maxSize, ratio);\n    // Copy from `ctx` and rotate\n    rCtx.translate(realMaxSize / 2, realMaxSize / 2);\n    rCtx.rotate(angle);\n    if (contentWidth > 0 && contentHeight > 0) {\n      rCtx.drawImage(canvas, -contentWidth / 2, -contentHeight / 2);\n    }\n    // Get boundary of rotated text\n    function getRotatePos(x, y) {\n      const targetX = x * Math.cos(angle) - y * Math.sin(angle);\n      const targetY = x * Math.sin(angle) + y * Math.cos(angle);\n      return [targetX, targetY];\n    }\n    let left = 0;\n    let right = 0;\n    let top = 0;\n    let bottom = 0;\n    const halfWidth = contentWidth / 2;\n    const halfHeight = contentHeight / 2;\n    const points = [[0 - halfWidth, 0 - halfHeight], [0 + halfWidth, 0 - halfHeight], [0 + halfWidth, 0 + halfHeight], [0 - halfWidth, 0 + halfHeight]];\n    points.forEach(_ref => {\n      let [x, y] = _ref;\n      const [targetX, targetY] = getRotatePos(x, y);\n      left = Math.min(left, targetX);\n      right = Math.max(right, targetX);\n      top = Math.min(top, targetY);\n      bottom = Math.max(bottom, targetY);\n    });\n    const cutLeft = left + realMaxSize / 2;\n    const cutTop = top + realMaxSize / 2;\n    const cutWidth = right - left;\n    const cutHeight = bottom - top;\n    // ================ Fill Alternate ================\n    const realGapX = gapX * ratio;\n    const realGapY = gapY * ratio;\n    const filledWidth = (cutWidth + realGapX) * 2;\n    const filledHeight = cutHeight + realGapY;\n    const [fCtx, fCanvas] = prepareCanvas(filledWidth, filledHeight);\n    function drawImg() {\n      let targetX = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      let targetY = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      fCtx.drawImage(rCanvas, cutLeft, cutTop, cutWidth, cutHeight, targetX, targetY, cutWidth, cutHeight);\n    }\n    drawImg();\n    drawImg(cutWidth + realGapX, -cutHeight / 2 - realGapY / 2);\n    drawImg(cutWidth + realGapX, +cutHeight / 2 + realGapY / 2);\n    return [fCanvas.toDataURL(), filledWidth / ratio, filledHeight / ratio];\n  }\n  return getClips;\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}